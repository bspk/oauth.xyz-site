{"version":3,"sources":["webpack:///./src/pages/tokens.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","title","keywords","from","to","code","access_token","value","type","parentName","language","codeString","jwks","handle","token1","actions","locations","datatypes","token2","multiple_access_tokens","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-tokens-mdx-c6bba726195c34b41d15.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/jricher/Projects/oauth.xyz-site/src/components/layout.js\";\nimport { Link } from 'gatsby';\nimport SEO from '../components/seo';\nimport Code from '../components/code';\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n\n\n      <SEO title=\"Tokens\" keywords={['oauth', 'authorization', 'security']} />\n      <MDXTag name=\"h1\" components={components}>{`Tokens`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Tokens in XYZ are issued in response to a request to the transaction endpoint. Unlike OAuth 2, tokens are never issued in the front channel via the browser regardless of the mode or type of client.`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        access_token: {\n          value: \"OS9M2PMHKUR64TB8N6BW7OZB8CDFONP219RP1LT0\",\n          type: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`Access token formats and values are opaque to the client, but must be known to both the AS (so that it can issue them), and sometimes to the RS (so that it can interpret them, unless it uses an externalized service for doing so).`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Token-key binding`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`A token issued without an associated key is a bearer token, and any party with access to the token can present it to the RS. This token can be presented as-is if the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`type`}</MDXTag>{` field is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bearer`}</MDXTag>{`, and the client sends it using the Authorization header method defined in RFC6750.`}</MDXTag>\n      <Code from=\"client\" to=\"rs\" language='http' codeString={`GET / HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer OS9M2PMHKUR64TB8N6BW7OZB8CDFONP219RP1LT0`} />\n      <MDXTag name=\"p\" components={components}>{`If the type is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sha3`}</MDXTag>{` then the token is presented as the Base64 encoded SHA3 hash of the token value.`}</MDXTag>\n      <Code from=\"client\" to=\"rs\" language='http' codeString={`GET / HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer WtHmGirjNWJUrWEv7K0I46_hwEdS7SqMcKZOmEsC8XE610t6o7DAv57Zm-3TL3Y9C7UG2AAynXQbwmROXaPMug`} />\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`I'm not convinced that this method is worthwhile. Without some randomness mixed in to the request, the hash is static and therefore as good as the original token for replay and capture. Non-bearer access really needs binding to a key, as below.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`A token issued with an associated key is bound to that key, and proof of possession of that key must be presented to the RS alongside the token. `}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        access_token: {\n          value: \"OS9M2PMHKUR64TB8N6BW7OZB8CDFONP219RP1LT0\",\n          jwks: {\n            \"keys\": [{\n              \"kty\": \"RSA\",\n              \"e\": \"AQAB\",\n              \"kid\": \"xyz-1\",\n              \"alg\": \"RS256\",\n              \"n\": \"kOB5rR4Jv0GMeLaY6_It_r3ORwdf8ci_JtffXyaSx8xYJCCNaOKNJn_Oz0YhdHbXTeWO5AoyspDWJbN5w_7bdWDxgpD-y6jnD1u9YhBOCWObNPFvpkTM8LC7SdXGRKx2k8Me2r_GssYlyRpqvpBlY5-ejCywKRBfctRcnhTTGNztbbDBUyDSWmFMVCHe5mXT4cL0BwrZC6S-uu-LAx06aKwQOPwYOGOslK8WPm1yGdkaA1uF_FpS6LS63WYPHi_Ap2B7_8Wbw4ttzbMS_doJvuDagW8A1Ip3fXFAHtRAcKw7rdI4_Xln66hJxFekpdfWdiPQddQ6Y1cK2U3obvUg7w\"\n            }]\n          }\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The associated key may be one of the public keys the client has proved ownership of when talking to the AS during this transaction, or it may be a key generated by the AS and handed to the client.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Methods for key binding are `}<Link to=\"/keys\">{`the same as used by the client to talk to the transaction endpoint`}</Link>{`, but applied to the resource server. `}</MDXTag>\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`Since we don't have full control over the resource server's API, the methods available to the client aren't as well defined ahead of time. For example, using detached JWS, we rely on signing the body, but there may not be a request body at the RS. This makes more sense with MTLS.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Refreshing tokens`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If the access token is issued alongside a transaction handle:`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        access_token: {\n          value: \"OS9M2PMHKUR64TB8N6BW7OZB8CDFONP219RP1LT0\",\n          type: \"bearer\"\n        },\n        handle: {\n          value: \"80UPRY5NM33OMUKMKSKU\",\n          type: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`Then the client can use that handle to request a new access token with the same characteristics.`}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        handle: \"80UPRY5NM33OMUKMKSKU\"\n      }} />\n      <MDXTag name=\"p\" components={components}>{`If the transaction handle is still valid, the AS issues the new access token.`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        access_token: {\n          value: \"FKPLDO5394XVIWHVNR7POUNC4OYJ2LWKYYZGKFS6\",\n          type: \"bearer\"\n        },\n        handle: {\n          value: \"3TK228JBA3532AFKQUFN\",\n          type: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`Note that since this process uses a transaction handle, which is rotated upon each use, if the AS wants to let the client continue to get more access tokens it will return the new access token with a new transaction handle.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`It is up to the AS whether it wants to throw out the original access token.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Revoking tokens`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`A client can request the revocation of a token by sending a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DELETE`}</MDXTag>{` request to the transaction endpoint with the access token in the payload and the client's bound keys that were used during the token's issuance in the request.`}</MDXTag>\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`It would be nice to allow the token to be its own credential for its deletion, especially in cases where it's bound to, for instance, the client's certificate.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`The semantics of a body with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DELETE`}</MDXTag>{` request are iffy at best, but as an alternative, the AS could issue a token-management URL alongside the access token. This kind of URL could be used for introspection by the RS, if the RS had a way to get the URL along with the token itself. `}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Multiple access tokens`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`A client can make a `}<Link to=\"/transactionrequest\">{`transaction request`}</Link>{` with a multi-part `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`resources`}</MDXTag>{` section, which is formatted as a JSON object with the field names chosen by the client to differentiate the access being requested. A request would look like this.`}</MDXTag>\n      <Code code={{\n        token1: [{\n          actions: [\"read\", \"write\", \"dolphin\"],\n          locations: [\"https://server.example.net/\", \"https://resource.local/other\"],\n          datatypes: [\"metadata\", \"images\"]\n        }],\n        token2: [{\n          actions: [\"foo\", \"bar\", \"dolphin\"],\n          locations: [\"https://resource.other/\"],\n          datatypes: [\"data\", \"pictures\"]\n        }]\n      }} />\n      <MDXTag name=\"p\" components={components}>{`For this request, the server can return multiple access tokens like this.`}</MDXTag>\n      <Code code={{\n        multiple_access_tokens: {\n          token1: {\n            value: \"OS9M2PMHKUR64TB8N6BW7OZB8CDFONP219RP1LT0\",\n            type: \"bearer\"\n          },\n          token2: {\n            value: \"UFGLO2FDAFG7VGZZPJ3IZEMN21EVU71FHCARP4J1\",\n            type: \"bearer\"\n          }\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`token1`}</MDXTag>{` access token in the response corresponds directly to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`token1`}</MDXTag>{` portion of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`resources`}</MDXTag>{` request, and the same applies to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`token2`}</MDXTag>{`. The AS can't add an additional access token that the client did not specifically request, but it can omit a requested access token in case it was not issued. This could be because the user denied the authorization request or some other policy decision demanded it.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}