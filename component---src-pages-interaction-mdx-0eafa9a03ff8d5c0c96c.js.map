{"version":3,"sources":["webpack://oauth.xyz/./src/pages/interaction.mdx","webpack://oauth.xyz/./src/components/header.js","webpack://oauth.xyz/./src/components/layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","keywords","parentName","to","language","codeString","from","code","interact","redirect","finish","continue","access_token","value","uri","interact_ref","start","user_code","url","wait","src","alt","isMDXComponent","menuLinks","name","link","location","className","style","margin","color","textDecoration","map","class","children","maxWidth","padding","paddingTop"],"mappings":"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","file":"component---src-pages-interaction-mdx-0eafa9a03ff8d5c0c96c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jricher/Projects/oauth.xyz-site/src/components/layout.js\";\nimport Code from \"../components/code\";\nimport SEO from '../components/seo';\nimport { Link } from 'gatsby';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Interaction\" keywords={['oauth', 'authorization', 'security']} mdxType=\"SEO\" />\n    <h1>{`Interaction`}</h1>\n    <p>{`During a transaction, the AS will often require interaction from a user. This user can be the same person running the client software, or it could be another party who's not necessarily available. In the request, the client instance tells the AS how it is able to interact with the user running the software by declaring how it can start an interaction, how it can finish an interaction, and any other interaction-based hints that might help the AS. `}</p>\n    <h2>{`Start Modes`}</h2>\n    <p>{`The client can indicate one or more modes to `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` an interaction. `}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`redirect`}</inlineCode>{` mode is used when the client instance is capable of opening a browser on the same device for the user to interact with the AS, or otherwise directing the user to an arbitrary URL.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`app`}</inlineCode>{` mode is used when the client instance can launch an application from the same device the user is interacting with. The way that application communicates with the AS is not defined by GNAP.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`user_code`}</inlineCode>{` mode is used when the client instance can communicate an out-of-band code to the user for the user to provide to the AS (usually by typing it in).`}</li>\n    </ul>\n    <p>{`The client indicates these in the interaction request's `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` field by listing out the modes in an array. The AS evaluates this array and determines which, if any, of the modes are appropriate for the request. `}</p>\n    <p>{`In the future, other start modes could indicate things like allowing the client to send a request to a digital wallet or sending a message to the user through another communication channel.`}</p>\n    <h2>{`Finish Modes`}</h2>\n    <p>{`In addition, the client can indicate how it can receive a signal from the AS once interaction is completed. Currently, there are two methods of getting a response:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The client instance can set a `}<inlineCode parentName=\"li\">{`redirect`}</inlineCode>{` method including a URL that the AS can send the user back to when done interacting`}</li>\n      <li parentName=\"ul\">{`The client instance can set a `}<inlineCode parentName=\"li\">{`push`}</inlineCode>{` method including a URL that the AS can send an HTTP message to when the user is done interacting`}</li>\n    </ul>\n    <p>{`The messages from the AS to any of these finish methods will contain an `}<inlineCode parentName=\"p\">{`interact_ref`}</inlineCode>{` parameter that the client instance presents to the AS when it `}<Link to=\"/continue\" mdxType=\"Link\">{`continues the request at the AS`}</Link>{`.`}</p>\n    <p>{`The client can also poll the continuation endpoint as well, in which case a client wouldn't specify a finish mode. However, a client that's waiting for a response from interaction shouldn't poll before that interaction signal is completed because it won't have the interaction reference returned. A client that just wants to poll should leave the interaction `}<inlineCode parentName=\"p\">{`finish`}</inlineCode>{` field off of its request.`}</p>\n    <h3>{`Interaction Reference Hash`}</h3>\n    <p>{`In addition to the interaction reference, the AS will calculate a cryptographic hash, which is later verified by the client instance. The hash is created by first concatenating the following values with a newline `}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{` between them:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`nonce`}</inlineCode>{` value sent by the client instance in the initial request's `}<inlineCode parentName=\"li\">{`finish`}</inlineCode>{` section`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`finish`}</inlineCode>{` nonce value returned in the initial response`}</li>\n      <li parentName=\"ul\">{`the unique interaction reference value `}<inlineCode parentName=\"li\">{`interact_ref`}</inlineCode>{` passed back to the client instance by the finish method`}</li>\n      <li parentName=\"ul\">{`the URL of the grant request endpoint, which identifies the AS the client instance is talking to`}</li>\n    </ul>\n    <p>{`For example, an input string could look like this:`}</p>\n    <Code language=\"none\" codeString={`VJLO6A4CAYLBXHTR0KRO\nMBDOFXG4Y5CVJCX821LH\n4IFWWIKYBC2PQ6U56NL1\nhttps://server.example.com/tx`} mdxType=\"Code\" />\n    <blockquote>\n      <p parentName=\"blockquote\">{`There's no trailing newline on this string, but conveying that in an example is really difficult to do.`}</p>\n    </blockquote>\n    <p>{`The AS and client instance then pass this value through a hash function to get the interaction hash. By default, the finish methods use a `}<inlineCode parentName=\"p\">{`SHA3`}</inlineCode>{` 512-bit hash over this data. The client instance can choose a different hash algorithm by sending a `}<inlineCode parentName=\"p\">{`hash_method`}</inlineCode>{` parameter as part of the `}<inlineCode parentName=\"p\">{`finish`}</inlineCode>{` object with a different registered hash value. If the AS can't honor the client instance's requested hash method, it has to fail the request from the start.`}</p>\n    <h2>{`UI Hints`}</h2>\n    <p>{`The client instance can also give some hints to the AS about how to handle the interaction. Currently, the client can only send a set of preferred UI locales, but in the future other information the client might know could be set here as well.`}</p>\n    <h1>{`Example Interaction Combinations`}</h1>\n    <p>{`While the different interaction modes can be mixed and matched to fit different needs, as shown on the `}<Link to=\"/request\" mdxType=\"Link\">{`request demo page`}</Link>{`, there are a number of common combinations that are worth discussing.`}</p>\n    <h2>{`Redirect with Callback`}</h2>\n    <p>{`In fully redirect based interaction, the client sends the user to an interactive page at the AS. The AS then sends the user back to the client with an HTTP redirect. `}</p>\n    <p>{`To use this mode, the client's transaction request includes a section that includes a URI the client can receive requests at as well as a unique state value. `}</p>\n    <Code from=\"client\" to=\"as\" code={{\n      \"interact\": {\n        \"start\": [\"redirect\"],\n        \"finish\": {\n          \"method\": \"redirect\",\n          \"uri\": \"https://client.example.net/return/123455\",\n          \"nonce\": \"VJLO6A4CAYLBXHTR0KRO\"\n        }\n      }\n    }} mdxType=\"Code\" />\n    <p>{`The URI in the finish method must be reachable from the user's system browser, and can be any `}<inlineCode parentName=\"p\">{`https`}</inlineCode>{` URL, an `}<inlineCode parentName=\"p\">{`http`}</inlineCode>{` URL for a local-to-the-device host, or a service-specific URI that the user's browser can open. The `}<inlineCode parentName=\"p\">{`nonce`}</inlineCode>{` must be a unique value for each transaction and cannot be re-used. The `}<inlineCode parentName=\"p\">{`nonce`}</inlineCode>{` value is opaque to the AS and should be random. The client remembers this `}<inlineCode parentName=\"p\">{`nonce`}</inlineCode>{` value and associates it with the current user. For a web server or other web application, this is generally done by placing it in the user's session. Native applications are generally considered single-user in nature, so the `}<inlineCode parentName=\"p\">{`nonce`}</inlineCode>{` value is remembered in the application's current state.`}</p>\n    <p>{`When the AS determines that the client's request needs user interaction, it creates a unique interaction URL and returns it to the client in the transaction response. The AS associates this unique URI with the transaction. The interaction URI is for a user-facing page at the AS.`}</p>\n    <Code from=\"as\" to=\"client\" code={{\n      interact: {\n        redirect: \"https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ\",\n        finish: \"MBDOFXG4Y5CVJCX821LH\"\n      },\n      continue: {\n        access_token: {\n          value: \"80UPRY5NM33OMUKMKSKU\"\n        },\n        uri: \"https://server.example.com/continue\"\n      }\n    }} mdxType=\"Code\" />\n    <p>{`Much like the callback URI, the interaction URI must be reachable from the user's system browser, and can be any `}<inlineCode parentName=\"p\">{`https`}</inlineCode>{` URL, an `}<inlineCode parentName=\"p\">{`http`}</inlineCode>{` URL for a local-to-the-device host, or a service-specific URI that the user's browser can open.`}</p>\n    <p>{`The client sends the user to the URL completely as-is, without adding any query parameters, fragments, paths, or other components. If the client is a web server, it can send the user to the remote site via an HTTP redirect.`}</p>\n    <Code from=\"client\" to=\"browser\" language='http' codeString={`HTTP 302 Found\nLocation: https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ`} mdxType=\"Code\" />\n    <p>{`If the client is a mobile application, such as an Android app, it can launch the system browser for interaction.`}</p>\n    <Code from=\"client\" to=\"browser\" language='java' codeString={`Intent browserIntent = \n  new Intent(Intent.ACTION_VIEW, \n    Uri.parse(\"https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ\"));\nstartActivity(browserIntent);`} mdxType=\"Code\" />\n    <p>{`Obviously, any method including an embedded security tab such as used by the AppAuth implementation of OAuth 2 is also acceptable. The important thing is to get the current user to the AS, where they can start interacting.`}</p>\n    <p>{`Once at the AS, the AS can ask the user for authentication, and to authorize the application itself. The AS could prompt the user to provide additional claims or proofs however it sees fit, and this interaction is ultimately outside of the protocol.`}</p>\n    <p>{`When the AS has collected whatever input it needs from the user, it sends the user back to the client with an HTTP redirect. First, the AS creates a unique, unguessable interaction handle that the client can use in its subsequent interaction request. The AS also calculates an interaction hash as described above.`}</p>\n    <p>{`The AS creates the URL for the redirect by taking the `}<inlineCode parentName=\"p\">{`callback`}</inlineCode>{` URI presented in the transaction request and appending two parameters: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`a unique interaction reference, in this example `}<inlineCode parentName=\"li\">{`4IFWWIKYBC2PQ6U56NL1`}</inlineCode></li>\n      <li parentName=\"ul\">{`the Base64 URL encoded `}<inlineCode parentName=\"li\">{`hash`}</inlineCode>{` value calculated as described above`}</li>\n    </ul>\n    <Code from=\"as\" to=\"browser\" language='http' codeString={`HTTP 302 Found\nLocation: https://client.example.net/return/123455\n  ?hash=p28jsq0Y2KK3WS__a42tavNC64ldGTBroywsWxT4md_jZQ1R2HZT8BOWYHcLmObM7XHPAdJzTZMtKBsaraJ64A\n  &interact_ref=4IFWWIKYBC2PQ6U56NL1`} mdxType=\"Code\" />\n    <p>{`Note that the AS has to use a proper URL builder in case the client's callback URL contains existing query parameters, is lacking a root path, or has some other anomaly which would make it problematic to simply concatenate the strings. `}</p>\n    <p>{`Once the AS creates the redirect response to the interaction request, the AS deletes or otherwise deactivates the interaction URL to prevent phishing and replay attacks. `}</p>\n    <p>{`If the AS determines that there is an error during the interaction, its response depends on whether or not the incoming interaction URL was valid.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If the URL was valid and bound to an active transaction, the AS can return to the client as in a successful transaction. The client needs to send data to the transaction endpoint to determine next steps.`}</li>\n      <li parentName=\"ul\">{`If the URL was not valid or not bound to an active transaction, the AS can only display to the user an error. Since the client has no way to inject a redirect URI alongside an invalid interaction request, there is reduced risk of open redirection attack.`}</li>\n    </ul>\n    <p>{`The client receives a request from the user's browser through the callback URL. If the client is a web server, this comes in as any other request. If the client is a native application, it usually receives the full URL from the system in whatever function it has registered to receive incoming requests. In any event, the client needs to parse the `}<inlineCode parentName=\"p\">{`hash`}</inlineCode>{` parameter and compare its value to a hash calculated in the same way that the AS created it. Since both the AS and the client instance have access to all forms of input in the hash calculation, this is possible. If these hash values don't match the client returns an error to the user and does not call the AS again.`}</p>\n    <p>{`The client then sends a `}<Link to=\"/continue\" mdxType=\"Link\">{`continue request`}</Link>{` to the AS including the interaction reference as a parameter.`}</p>\n    <Code from=\"client\" to=\"as\" code={{\n      interact_ref: \"4IFWWIKYBC2PQ6U56NL1\"\n    }} mdxType=\"Code\" />\n    <p>{`The AS looks up the transaction from a combination of the continuation request  and fetches the interaction reference associated with that transaction. The AS compares the presented reference to the stored interaction reference it appended to the client's callback with `}<inlineCode parentName=\"p\">{`interact`}</inlineCode>{`. If they match, the AS continues processing as normal, likely issuing a token.`}</p>\n    <h2>{`User Code with Polling`}</h2>\n    <p>{`The user-code-based interaction is intended for clients that need to have the user use a secondary device of some kind to interact with the authorization server. Unlike the redirect based interaction, the client does not send the user to the AS directly. Instead, the client presents the user with a code and instructs the user to interact with the server. Meanwhile, the client polls the AS in the background until the transaction is approved.`}</p>\n    <p>{`The client starts this mode by sending a transaction request indicating that the user will interact with the AS through a secondary device. `}</p>\n    <Code from=\"client\" to=\"as\" code={{\n      \"interact\": {\n        start: [\"user_code\"]\n      }\n    }} mdxType=\"Code\" />\n    <p>{`When the AS determines that the client's request needs user interaction, it sends an interaction URI in the transaction response. The interaction URI is for a user-facing page at the AS, and this can be a static URI for this mode. The AS also includes a short user-facing code. This code must be random, short-lived, and easily typed by a user. It must be processed in a case-insensitive way, and should use characters that are unambiguous when displayed even at low resolution (e.g., not using both the `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` (zero) and `}<inlineCode parentName=\"p\">{`O`}</inlineCode>{` (letter O) characters as options).`}</p>\n    <Code from=\"as\" to=\"client\" code={{\n      interact: {\n        user_code: {\n          url: \"https://server.example.com/interact/device\",\n          code: \"A1BC-3DFF\"\n        }\n      },\n      continue: {\n        access_token: {\n          value: \"80UPRY5NM33OMUKMKSKU\"\n        },\n        uri: \"https://server.example.com/continue\",\n        wait: 30\n      }\n    }} mdxType=\"Code\" />\n    <p>{`The client presents the user code to the user. The client also indicates to the user that they need to go to the interaction URL. As this is likely to be a static URL, the AS can provide a static link to this page. `}</p>\n    <p>{`Once at the AS, the AS can ask the user for authentication, and to authorize the application itself. The AS could prompt the user to provide additional claims or proofs however it sees fit, and this interaction is ultimately outside of the protocol. At the interaction page, the user is prompted to enter the code from their device. The AS uses this code to look up the associated transaction to determine which actions it needs to take.`}</p>\n    <p>{`When the AS has collected whatever additional input it needs from the user, it displays to the user that they can return to their device and continue operation.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To completely close a session-fixation attack, we could require the AS to present another code to the user and have the user enter that into the client device. This only works on some kinds of devices, though, so it would need to be an option. Additionally, we might want to consider a kind of \"secondary application\" based interaction that isn't web-based, such as a CIBA login.`}</p>\n    </blockquote>\n    <p>{`Meanwhile, the client can poll the AS using the transaction handle to see if the user has authorized them yet. This request includes proofs of any keys that the client sent during the original transaction request.`}</p>\n    <Code from=\"client\" to=\"as\" language='http' codeString={`HTTP POST /continue\nAuthorization: GNAP 80UPRY5NM33OMUKMKSKU\nSignature-Input: gnap=(\"host\" \"authorization\" \"@request-target\");created=1624564850\nSignature: gnap=:N0MynxZllMLOTxgl4PmgHZjQ+gwHKGFGeg6wD5FXKtMM25PfcU2eLVMF9rPuZTguUKnEbvrY7spXlJDZ0jrKZQ==:`} mdxType=\"Code\" />\n    <p>{`If the user has yet to approve the transaction, the AS sends back a response telling the client to wait. This response can contain a new continuation access token and URL which replace the client's original ones.`}</p>\n    <Code from=\"as\" to=\"client\" code={{\n      continue: {\n        access_token: {\n          value: \"BI9QNW6V9W3XFJK4R02D\"\n        },\n        uri: \"https://server.example.com/continue\",\n        wait: 30\n      }\n    }} mdxType=\"Code\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`wait`}</inlineCode>{` parameter tells the client the number of integer seconds it must wait before polling again. The client can continue to poll in this manner until it receives either a token response or the user code times out and the client receives an error response.`}</p>\n    <h2>{`Redirect with Polling`}</h2>\n    <p>{`For some kinds of clients, it is possible to show the user a visual signal such as a QR code that the user can scan on a secondary device. This allows the client to send the user to an arbitrary URL but not receive a callback in the front channel, so polling is necessary. `}</p>\n    <Code from=\"client\" to=\"as\" code={{\n      \"interact\": {\n        start: [\"redirect\"]\n      }\n    }} mdxType=\"Code\" />\n    <p>{`As above, when the AS determines that the client's request needs user interaction, it creates a unique interaction URL and returns it to the client in the response. The AS associates this unique URI with the transaction. The interaction URI is for a user-facing page at the AS. Note that because the client did not send a `}<inlineCode parentName=\"p\">{`callback`}</inlineCode>{` to the AS, the AS does not generate or return a `}<inlineCode parentName=\"p\">{`callback_server_nonce`}</inlineCode>{` parameter.`}</p>\n    <Code from=\"as\" to=\"client\" code={{\n      interact: {\n        redirect: \"https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ\"\n      },\n      continue: {\n        access_token: {\n          value: \"BI9QNW6V9W3XFJK4R02D\"\n        },\n        uri: \"https://server.example.com/continue\",\n        wait: 30\n      }\n    }} mdxType=\"Code\" />\n    <p>{`The client then communicates this arbitrary URL to the user, perhaps using a QR code. `}</p>\n    <img src=\"http://api.qrserver.com/v1/create-qr-code/?color=000000&amp;bgcolor=FFFFFF&amp;data=https%3A%2F%2Fserver.example.com%2Finteract%2F4CF492MLVMSW9MKMXKHQ&amp;qzone=1&amp;margin=0&amp;size=200x200&amp;ecc=L\" alt=\"qr code\" />\n    <p>{`While the client waits for the user to complete the interaction, it polls the AS using the transaction handle.`}</p>\n    <Code from=\"client\" to=\"as\" language='http' codeString={`HTTP POST /continue\nAuthorization: GNAP 80UPRY5NM33OMUKMKSKU\nSignature-Input: gnap=(\"host\" \"authorization\" \"@request-target\");created=1624564850\nSignature: gnap=:N0MynxZllMLOTxgl4PmgHZjQ+gwHKGFGeg6wD5FXKtMM25PfcU2eLVMF9rPuZTguUKnEbvrY7spXlJDZ0jrKZQ==:`} mdxType=\"Code\" />\n    <p>{`If the user has yet to approve the transaction, the AS sends back a response telling the client to wait. This response contains a new transaction handle which replaces the client's original one.`}</p>\n    <Code from=\"as\" to=\"client\" code={{\n      continue: {\n        access_token: {\n          value: \"ZI9QNW6V9W3XFJK4R02D\"\n        },\n        uri: \"https://server.example.com/continue\",\n        wait: 30\n      }\n    }} mdxType=\"Code\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { Link, graphql } from 'gatsby'\nimport { Location } from '@reach/router';\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst menuLinks = [\n      {\n        name: 'Request',\n        link: '/request/'\n      },\n      {\n        name: 'Continue',\n        link: '/continue/'\n      },\n      {\n        name: 'Response',\n        link: '/response/'\n      },\n      {\n        name: 'Interaction',\n        link: '/interaction/'\n      },\n      {\n        name: 'Keys',\n        link: '/keys/'\n      },\n      {\n        name: 'Tokens',\n        link: '/tokens/'\n      },\n      {\n        name: 'Discovery',\n        link: '/discovery/'\n      },\n      {\n        name: 'Other Specs',\n        link: '/specs/'\n      },\n      {\n        name: 'About',\n        link: '/about/'\n      },\n]\n\nconst Header = ({ location }) => (\n  <div className=\"header\">\n    <div className=\"wrapper\">\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          <img src=\"/xyz.png\" alt=\"XYZ\" className=\"logo\" />\n          XYZ: Implementing GNAP\n        </Link>\n      </h1>\n          <nav>\n            {\n              menuLinks.map(link =>\n                  <Link to={link.link}><span>&raquo;</span> {link.name}</Link>\n              )\n            }\n          </nav>\n    </div>\n    <div class=\"subnav\">\n            \n    </div>\n  </div>\n)\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './layout.css'\n\nconst Layout = ({ children }) => (\n      <>\n        <Header/>\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}